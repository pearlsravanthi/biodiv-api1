package biodiv;
// Generated 31 Jul, 2017 7:18:53 AM by Hibernate Tools 3.5.0.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * CommonNames generated by hbm2java
 */
@Entity
@Table(name = "common_names", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = {
		"taxon_concept_id", "language_id", "name" }))
public class CommonNames implements java.io.Serializable {

	private long id;
	private Language language;
	private Suser suser;
	private TaxonomyDefinition taxonomyDefinition;
	private String name;
	private Date uploadTime;
	private String transliteration;
	private String status;
	private String position;
	private String authorYear;
	private String matchDatabaseName;
	private String matchId;
	private String ibpSource;
	private String viaDatasource;
	private String lowercaseName;
	private String nameSourceId;
	private boolean isDeleted;
	private Set commonNamesSusers = new HashSet(0);

	public CommonNames() {
	}

	public CommonNames(long id, TaxonomyDefinition taxonomyDefinition, String name, boolean isDeleted) {
		this.id = id;
		this.taxonomyDefinition = taxonomyDefinition;
		this.name = name;
		this.isDeleted = isDeleted;
	}

	public CommonNames(long id, Language language, Suser suser, TaxonomyDefinition taxonomyDefinition, String name,
			Date uploadTime, String transliteration, String status, String position, String authorYear,
			String matchDatabaseName, String matchId, String ibpSource, String viaDatasource, String lowercaseName,
			String nameSourceId, boolean isDeleted, Set commonNamesSusers) {
		this.id = id;
		this.language = language;
		this.suser = suser;
		this.taxonomyDefinition = taxonomyDefinition;
		this.name = name;
		this.uploadTime = uploadTime;
		this.transliteration = transliteration;
		this.status = status;
		this.position = position;
		this.authorYear = authorYear;
		this.matchDatabaseName = matchDatabaseName;
		this.matchId = matchId;
		this.ibpSource = ibpSource;
		this.viaDatasource = viaDatasource;
		this.lowercaseName = lowercaseName;
		this.nameSourceId = nameSourceId;
		this.isDeleted = isDeleted;
		this.commonNamesSusers = commonNamesSusers;
	}

	@Id

	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "language_id")
	public Language getLanguage() {
		return this.language;
	}

	public void setLanguage(Language language) {
		this.language = language;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "uploader_id")
	public Suser getSuser() {
		return this.suser;
	}

	public void setSuser(Suser suser) {
		this.suser = suser;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "taxon_concept_id", nullable = false)
	public TaxonomyDefinition getTaxonomyDefinition() {
		return this.taxonomyDefinition;
	}

	public void setTaxonomyDefinition(TaxonomyDefinition taxonomyDefinition) {
		this.taxonomyDefinition = taxonomyDefinition;
	}

	@Column(name = "name", nullable = false)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "upload_time", length = 29)
	public Date getUploadTime() {
		return this.uploadTime;
	}

	public void setUploadTime(Date uploadTime) {
		this.uploadTime = uploadTime;
	}

	@Column(name = "transliteration")
	public String getTransliteration() {
		return this.transliteration;
	}

	public void setTransliteration(String transliteration) {
		this.transliteration = transliteration;
	}

	@Column(name = "status")
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@Column(name = "position")
	public String getPosition() {
		return this.position;
	}

	public void setPosition(String position) {
		this.position = position;
	}

	@Column(name = "author_year")
	public String getAuthorYear() {
		return this.authorYear;
	}

	public void setAuthorYear(String authorYear) {
		this.authorYear = authorYear;
	}

	@Column(name = "match_database_name")
	public String getMatchDatabaseName() {
		return this.matchDatabaseName;
	}

	public void setMatchDatabaseName(String matchDatabaseName) {
		this.matchDatabaseName = matchDatabaseName;
	}

	@Column(name = "match_id")
	public String getMatchId() {
		return this.matchId;
	}

	public void setMatchId(String matchId) {
		this.matchId = matchId;
	}

	@Column(name = "ibp_source")
	public String getIbpSource() {
		return this.ibpSource;
	}

	public void setIbpSource(String ibpSource) {
		this.ibpSource = ibpSource;
	}

	@Column(name = "via_datasource")
	public String getViaDatasource() {
		return this.viaDatasource;
	}

	public void setViaDatasource(String viaDatasource) {
		this.viaDatasource = viaDatasource;
	}

	@Column(name = "lowercase_name")
	public String getLowercaseName() {
		return this.lowercaseName;
	}

	public void setLowercaseName(String lowercaseName) {
		this.lowercaseName = lowercaseName;
	}

	@Column(name = "name_source_id")
	public String getNameSourceId() {
		return this.nameSourceId;
	}

	public void setNameSourceId(String nameSourceId) {
		this.nameSourceId = nameSourceId;
	}

	@Column(name = "is_deleted", nullable = false)
	public boolean isIsDeleted() {
		return this.isDeleted;
	}

	public void setIsDeleted(boolean isDeleted) {
		this.isDeleted = isDeleted;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "commonNames")
	public Set getCommonNamesSusers() {
		return this.commonNamesSusers;
	}

	public void setCommonNamesSusers(Set commonNamesSusers) {
		this.commonNamesSusers = commonNamesSusers;
	}

}
