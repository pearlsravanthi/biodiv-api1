package biodiv;
// Generated 31 Jul, 2017 7:18:53 AM by Hibernate Tools 3.5.0.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

/**
 * Species generated by hbm2java
 */
@Entity
@Table(name = "species", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = "guid"))
public class Species implements java.io.Serializable {

	private long id;
	private long version;
	private Habitat habitat;
	private Resource resource;
	private TaxonomyDefinition taxonomyDefinition;
	private String guid;
	private Integer percentOfInfo;
	private String title;
	private Date createdOn;
	private Date updatedOn;
	private Date dateCreated;
	private Date lastUpdated;
	private Integer featureCount;
	private Boolean hasMedia;
	private boolean isDeleted;
	private Set speciesResources = new HashSet(0);
	private Set taxonomyDefinitions = new HashSet(0);
	private Set speciesFields = new HashSet(0);
	private Set userGroups = new HashSet(0);

	public Species() {
	}

	public Species(long id, TaxonomyDefinition taxonomyDefinition, String guid, String title, boolean isDeleted) {
		this.id = id;
		this.taxonomyDefinition = taxonomyDefinition;
		this.guid = guid;
		this.title = title;
		this.isDeleted = isDeleted;
	}

	public Species(long id, Habitat habitat, Resource resource, TaxonomyDefinition taxonomyDefinition, String guid,
			Integer percentOfInfo, String title, Date createdOn, Date updatedOn, Date dateCreated, Date lastUpdated,
			Integer featureCount, Boolean hasMedia, boolean isDeleted, Set speciesResources, Set taxonomyDefinitions,
			Set speciesFields, Set userGroups) {
		this.id = id;
		this.habitat = habitat;
		this.resource = resource;
		this.taxonomyDefinition = taxonomyDefinition;
		this.guid = guid;
		this.percentOfInfo = percentOfInfo;
		this.title = title;
		this.createdOn = createdOn;
		this.updatedOn = updatedOn;
		this.dateCreated = dateCreated;
		this.lastUpdated = lastUpdated;
		this.featureCount = featureCount;
		this.hasMedia = hasMedia;
		this.isDeleted = isDeleted;
		this.speciesResources = speciesResources;
		this.taxonomyDefinitions = taxonomyDefinitions;
		this.speciesFields = speciesFields;
		this.userGroups = userGroups;
	}

	@Id

	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@Version
	@Column(name = "version", nullable = false)
	public long getVersion() {
		return this.version;
	}

	public void setVersion(long version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "habitat_id")
	public Habitat getHabitat() {
		return this.habitat;
	}

	public void setHabitat(Habitat habitat) {
		this.habitat = habitat;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "repr_image_id")
	public Resource getResource() {
		return this.resource;
	}

	public void setResource(Resource resource) {
		this.resource = resource;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "taxon_concept_id", nullable = false)
	public TaxonomyDefinition getTaxonomyDefinition() {
		return this.taxonomyDefinition;
	}

	public void setTaxonomyDefinition(TaxonomyDefinition taxonomyDefinition) {
		this.taxonomyDefinition = taxonomyDefinition;
	}

	@Column(name = "guid", unique = true, nullable = false)
	public String getGuid() {
		return this.guid;
	}

	public void setGuid(String guid) {
		this.guid = guid;
	}

	@Column(name = "percent_of_info")
	public Integer getPercentOfInfo() {
		return this.percentOfInfo;
	}

	public void setPercentOfInfo(Integer percentOfInfo) {
		this.percentOfInfo = percentOfInfo;
	}

	@Column(name = "title", nullable = false)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_on", length = 29)
	public Date getCreatedOn() {
		return this.createdOn;
	}

	public void setCreatedOn(Date createdOn) {
		this.createdOn = createdOn;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated_on", length = 29)
	public Date getUpdatedOn() {
		return this.updatedOn;
	}

	public void setUpdatedOn(Date updatedOn) {
		this.updatedOn = updatedOn;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_created", length = 29)
	public Date getDateCreated() {
		return this.dateCreated;
	}

	public void setDateCreated(Date dateCreated) {
		this.dateCreated = dateCreated;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", length = 29)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "feature_count")
	public Integer getFeatureCount() {
		return this.featureCount;
	}

	public void setFeatureCount(Integer featureCount) {
		this.featureCount = featureCount;
	}

	@Column(name = "has_media")
	public Boolean getHasMedia() {
		return this.hasMedia;
	}

	public void setHasMedia(Boolean hasMedia) {
		this.hasMedia = hasMedia;
	}

	@Column(name = "is_deleted", nullable = false)
	public boolean isIsDeleted() {
		return this.isDeleted;
	}

	public void setIsDeleted(boolean isDeleted) {
		this.isDeleted = isDeleted;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "species")
	public Set getSpeciesResources() {
		return this.speciesResources;
	}

	public void setSpeciesResources(Set speciesResources) {
		this.speciesResources = speciesResources;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "species")
	public Set getTaxonomyDefinitions() {
		return this.taxonomyDefinitions;
	}

	public void setTaxonomyDefinitions(Set taxonomyDefinitions) {
		this.taxonomyDefinitions = taxonomyDefinitions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "species")
	public Set getSpeciesFields() {
		return this.speciesFields;
	}

	public void setSpeciesFields(Set speciesFields) {
		this.speciesFields = speciesFields;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "user_group_species", schema = "public", joinColumns = {
			@JoinColumn(name = "species_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "user_group_id", nullable = false, updatable = false) })
	public Set getUserGroups() {
		return this.userGroups;
	}

	public void setUserGroups(Set userGroups) {
		this.userGroups = userGroups;
	}

}
