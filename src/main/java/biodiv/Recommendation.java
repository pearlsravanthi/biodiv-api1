package biodiv;
// Generated 31 Jul, 2017 7:18:53 AM by Hibernate Tools 3.5.0.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Recommendation generated by hbm2java
 */
@Entity
@Table(name = "recommendation", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = {
		"taxon_concept_id", "accepted_name_id", "name", "language_id" }))
public class Recommendation implements java.io.Serializable {

	private long id;
	private TaxonomyDefinition taxonomyDefinitionByAcceptedNameId;
	private TaxonomyDefinition taxonomyDefinitionByTaxonConceptId;
	private Date lastModified;
	private String name;
	private Boolean isScientificName;
	private Long languageId;
	private String lowercaseName;
	private String flaggingReason;
	private Boolean isFlagged;
	private Set observations = new HashSet(0);
	private Set recommendationVotesForRecommendationId = new HashSet(0);
	private Set recommendationVotesForCommonNameRecoId = new HashSet(0);

	public Recommendation() {
	}

	public Recommendation(long id, Date lastModified, String name) {
		this.id = id;
		this.lastModified = lastModified;
		this.name = name;
	}

	public Recommendation(long id, TaxonomyDefinition taxonomyDefinitionByAcceptedNameId,
			TaxonomyDefinition taxonomyDefinitionByTaxonConceptId, Date lastModified, String name,
			Boolean isScientificName, Long languageId, String lowercaseName, String flaggingReason, Boolean isFlagged,
			Set observations, Set recommendationVotesForRecommendationId, Set recommendationVotesForCommonNameRecoId) {
		this.id = id;
		this.taxonomyDefinitionByAcceptedNameId = taxonomyDefinitionByAcceptedNameId;
		this.taxonomyDefinitionByTaxonConceptId = taxonomyDefinitionByTaxonConceptId;
		this.lastModified = lastModified;
		this.name = name;
		this.isScientificName = isScientificName;
		this.languageId = languageId;
		this.lowercaseName = lowercaseName;
		this.flaggingReason = flaggingReason;
		this.isFlagged = isFlagged;
		this.observations = observations;
		this.recommendationVotesForRecommendationId = recommendationVotesForRecommendationId;
		this.recommendationVotesForCommonNameRecoId = recommendationVotesForCommonNameRecoId;
	}

	@Id

	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "accepted_name_id")
	public TaxonomyDefinition getTaxonomyDefinitionByAcceptedNameId() {
		return this.taxonomyDefinitionByAcceptedNameId;
	}

	public void setTaxonomyDefinitionByAcceptedNameId(TaxonomyDefinition taxonomyDefinitionByAcceptedNameId) {
		this.taxonomyDefinitionByAcceptedNameId = taxonomyDefinitionByAcceptedNameId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "taxon_concept_id")
	public TaxonomyDefinition getTaxonomyDefinitionByTaxonConceptId() {
		return this.taxonomyDefinitionByTaxonConceptId;
	}

	public void setTaxonomyDefinitionByTaxonConceptId(TaxonomyDefinition taxonomyDefinitionByTaxonConceptId) {
		this.taxonomyDefinitionByTaxonConceptId = taxonomyDefinitionByTaxonConceptId;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_modified", nullable = false, length = 29)
	public Date getLastModified() {
		return this.lastModified;
	}

	public void setLastModified(Date lastModified) {
		this.lastModified = lastModified;
	}

	@Column(name = "name", nullable = false)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "is_scientific_name")
	public Boolean getIsScientificName() {
		return this.isScientificName;
	}

	public void setIsScientificName(Boolean isScientificName) {
		this.isScientificName = isScientificName;
	}

	@Column(name = "language_id")
	public Long getLanguageId() {
		return this.languageId;
	}

	public void setLanguageId(Long languageId) {
		this.languageId = languageId;
	}

	@Column(name = "lowercase_name")
	public String getLowercaseName() {
		return this.lowercaseName;
	}

	public void setLowercaseName(String lowercaseName) {
		this.lowercaseName = lowercaseName;
	}

	@Column(name = "flagging_reason", length = 1500)
	public String getFlaggingReason() {
		return this.flaggingReason;
	}

	public void setFlaggingReason(String flaggingReason) {
		this.flaggingReason = flaggingReason;
	}

	@Column(name = "is_flagged")
	public Boolean getIsFlagged() {
		return this.isFlagged;
	}

	public void setIsFlagged(Boolean isFlagged) {
		this.isFlagged = isFlagged;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "recommendation")
	public Set getObservations() {
		return this.observations;
	}

	public void setObservations(Set observations) {
		this.observations = observations;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "recommendationByRecommendationId")
	public Set getRecommendationVotesForRecommendationId() {
		return this.recommendationVotesForRecommendationId;
	}

	public void setRecommendationVotesForRecommendationId(Set recommendationVotesForRecommendationId) {
		this.recommendationVotesForRecommendationId = recommendationVotesForRecommendationId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "recommendationByCommonNameRecoId")
	public Set getRecommendationVotesForCommonNameRecoId() {
		return this.recommendationVotesForCommonNameRecoId;
	}

	public void setRecommendationVotesForCommonNameRecoId(Set recommendationVotesForCommonNameRecoId) {
		this.recommendationVotesForCommonNameRecoId = recommendationVotesForCommonNameRecoId;
	}

}
