package biodiv;
// Generated 31 Jul, 2017 7:18:53 AM by Hibernate Tools 3.5.0.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;

/**
 * Trait generated by hbm2java
 */
@Entity
@Table(name = "trait", schema = "public")
public class Trait implements java.io.Serializable {

	private long id;
	private long version;
	private Field field;
	private Date createdOn;
	private String dataTypes;
	private String description;
	private String icon;
	private boolean isDeleted;
	private Date lastRevised;
	private String name;
	private String ontologyUrl;
	private String source;
	private String traitTypes;
	private String units;
	private Boolean isNotObservationTrait;
	private Boolean showInObservation;
	private Boolean isParticipatory;
	private Set traitValues = new HashSet(0);
	private Set facts = new HashSet(0);
	private Set traitTaxonomyDefinitions = new HashSet(0);

	public Trait() {
	}

	public Trait(long id, Field field, Date createdOn, String dataTypes, boolean isDeleted, Date lastRevised,
			String name, String traitTypes) {
		this.id = id;
		this.field = field;
		this.createdOn = createdOn;
		this.dataTypes = dataTypes;
		this.isDeleted = isDeleted;
		this.lastRevised = lastRevised;
		this.name = name;
		this.traitTypes = traitTypes;
	}

	public Trait(long id, Field field, Date createdOn, String dataTypes, String description, String icon,
			boolean isDeleted, Date lastRevised, String name, String ontologyUrl, String source, String traitTypes,
			String units, Boolean isNotObservationTrait, Boolean showInObservation, Boolean isParticipatory,
			Set traitValues, Set facts, Set traitTaxonomyDefinitions) {
		this.id = id;
		this.field = field;
		this.createdOn = createdOn;
		this.dataTypes = dataTypes;
		this.description = description;
		this.icon = icon;
		this.isDeleted = isDeleted;
		this.lastRevised = lastRevised;
		this.name = name;
		this.ontologyUrl = ontologyUrl;
		this.source = source;
		this.traitTypes = traitTypes;
		this.units = units;
		this.isNotObservationTrait = isNotObservationTrait;
		this.showInObservation = showInObservation;
		this.isParticipatory = isParticipatory;
		this.traitValues = traitValues;
		this.facts = facts;
		this.traitTaxonomyDefinitions = traitTaxonomyDefinitions;
	}

	@Id

	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@Version
	@Column(name = "version", nullable = false)
	public long getVersion() {
		return this.version;
	}

	public void setVersion(long version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "field_id", nullable = false)
	public Field getField() {
		return this.field;
	}

	public void setField(Field field) {
		this.field = field;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_on", nullable = false, length = 29)
	public Date getCreatedOn() {
		return this.createdOn;
	}

	public void setCreatedOn(Date createdOn) {
		this.createdOn = createdOn;
	}

	@Column(name = "data_types", nullable = false)
	public String getDataTypes() {
		return this.dataTypes;
	}

	public void setDataTypes(String dataTypes) {
		this.dataTypes = dataTypes;
	}

	@Column(name = "description")
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "icon")
	public String getIcon() {
		return this.icon;
	}

	public void setIcon(String icon) {
		this.icon = icon;
	}

	@Column(name = "is_deleted", nullable = false)
	public boolean isIsDeleted() {
		return this.isDeleted;
	}

	public void setIsDeleted(boolean isDeleted) {
		this.isDeleted = isDeleted;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_revised", nullable = false, length = 29)
	public Date getLastRevised() {
		return this.lastRevised;
	}

	public void setLastRevised(Date lastRevised) {
		this.lastRevised = lastRevised;
	}

	@Column(name = "name", nullable = false)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "ontology_url")
	public String getOntologyUrl() {
		return this.ontologyUrl;
	}

	public void setOntologyUrl(String ontologyUrl) {
		this.ontologyUrl = ontologyUrl;
	}

	@Column(name = "source")
	public String getSource() {
		return this.source;
	}

	public void setSource(String source) {
		this.source = source;
	}

	@Column(name = "trait_types", nullable = false)
	public String getTraitTypes() {
		return this.traitTypes;
	}

	public void setTraitTypes(String traitTypes) {
		this.traitTypes = traitTypes;
	}

	@Column(name = "units")
	public String getUnits() {
		return this.units;
	}

	public void setUnits(String units) {
		this.units = units;
	}

	@Column(name = "is_not_observation_trait")
	public Boolean getIsNotObservationTrait() {
		return this.isNotObservationTrait;
	}

	public void setIsNotObservationTrait(Boolean isNotObservationTrait) {
		this.isNotObservationTrait = isNotObservationTrait;
	}

	@Column(name = "show_in_observation")
	public Boolean getShowInObservation() {
		return this.showInObservation;
	}

	public void setShowInObservation(Boolean showInObservation) {
		this.showInObservation = showInObservation;
	}

	@Column(name = "is_participatory")
	public Boolean getIsParticipatory() {
		return this.isParticipatory;
	}

	public void setIsParticipatory(Boolean isParticipatory) {
		this.isParticipatory = isParticipatory;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "trait")
	public Set getTraitValues() {
		return this.traitValues;
	}

	public void setTraitValues(Set traitValues) {
		this.traitValues = traitValues;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "trait")
	public Set getFacts() {
		return this.facts;
	}

	public void setFacts(Set facts) {
		this.facts = facts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "trait")
	public Set getTraitTaxonomyDefinitions() {
		return this.traitTaxonomyDefinitions;
	}

	public void setTraitTaxonomyDefinitions(Set traitTaxonomyDefinitions) {
		this.traitTaxonomyDefinitions = traitTaxonomyDefinitions;
	}

}
