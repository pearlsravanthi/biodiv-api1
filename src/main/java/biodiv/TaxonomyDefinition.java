package biodiv;
// Generated 31 Jul, 2017 7:18:53 AM by Hibernate Tools 3.5.0.Final

import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * TaxonomyDefinition generated by hbm2java
 */
@Entity
@Table(name = "taxonomy_definition", schema = "public")
public class TaxonomyDefinition implements java.io.Serializable {

	private long id;
	private Species species;
	private SpeciesGroup speciesGroup;
	private Suser suser;
	private ExternalLinks externalLinks;
	private String binomialForm;
	private String canonicalForm;
	private String italicisedForm;
	private String name;
	private String normalizedForm;
	private int rank;
	private String threatenedStatus;
	private Date uploadTime;
	private String status;
	private String position;
	private String authorYear;
	private String matchDatabaseName;
	private String matchId;
	private String ibpSource;
	private String viaDatasource;
	private Boolean isFlagged;
	private String lowercaseMatchName;
	private String colNameStatus;
	private String oldId;
	private String relationship;
	private String class_;
	private String flaggingReason;
	private Integer noOfcolmatches;
	private Boolean isDeleted;
	private String dirtyListReason;
	private String activityDescription;
	private String defaultHierarchy;
	private String nameSourceId;
	private Serializable traits;
	private Serializable traitsJson;
	private Set commonNameses = new HashSet(0);
	private Set namePermissionsForNodeId = new HashSet(0);
	private Set taxonomyRegistriesForParentTaxonDefinitionId = new HashSet(0);
	private Set recommendationsForTaxonConceptId = new HashSet(0);
	private Set acceptedSynonymsForSynonymId = new HashSet(0);
	private Set namePermissionsForRootNodeId = new HashSet(0);
	private Set speciesGroupMappings = new HashSet(0);
	private Set speciesPermissions = new HashSet(0);
	private Set taxonomyDefinitionYears = new HashSet(0);
	private Set docSciNames = new HashSet(0);
	private Set taxonomyRegistriesForTaxonDefinitionId = new HashSet(0);
	private Set acceptedSynonymsForAcceptedId = new HashSet(0);
	private Set synonymses = new HashSet(0);
	private Set traitTaxonomyDefinitions = new HashSet(0);
	private Set facts = new HashSet(0);
	private Set recommendationsForAcceptedNameId = new HashSet(0);
	private Set taxonomyDefinitionAuthors = new HashSet(0);
	private Set taxonomyDefinitionSusers = new HashSet(0);
	private Set specieses = new HashSet(0);

	public TaxonomyDefinition() {
	}

	public TaxonomyDefinition(long id, String canonicalForm, String name, int rank, String class_) {
		this.id = id;
		this.canonicalForm = canonicalForm;
		this.name = name;
		this.rank = rank;
		this.class_ = class_;
	}

	public TaxonomyDefinition(long id, Species species, SpeciesGroup speciesGroup, Suser suser,
			ExternalLinks externalLinks, String binomialForm, String canonicalForm, String italicisedForm, String name,
			String normalizedForm, int rank, String threatenedStatus, Date uploadTime, String status, String position,
			String authorYear, String matchDatabaseName, String matchId, String ibpSource, String viaDatasource,
			Boolean isFlagged, String lowercaseMatchName, String colNameStatus, String oldId, String relationship,
			String class_, String flaggingReason, Integer noOfcolmatches, Boolean isDeleted, String dirtyListReason,
			String activityDescription, String defaultHierarchy, String nameSourceId, Serializable traits,
			Serializable traitsJson, Set commonNameses, Set namePermissionsForNodeId,
			Set taxonomyRegistriesForParentTaxonDefinitionId, Set recommendationsForTaxonConceptId,
			Set acceptedSynonymsForSynonymId, Set namePermissionsForRootNodeId, Set speciesGroupMappings,
			Set speciesPermissions, Set taxonomyDefinitionYears, Set docSciNames,
			Set taxonomyRegistriesForTaxonDefinitionId, Set acceptedSynonymsForAcceptedId, Set synonymses,
			Set traitTaxonomyDefinitions, Set facts, Set recommendationsForAcceptedNameId,
			Set taxonomyDefinitionAuthors, Set taxonomyDefinitionSusers, Set specieses) {
		this.id = id;
		this.species = species;
		this.speciesGroup = speciesGroup;
		this.suser = suser;
		this.externalLinks = externalLinks;
		this.binomialForm = binomialForm;
		this.canonicalForm = canonicalForm;
		this.italicisedForm = italicisedForm;
		this.name = name;
		this.normalizedForm = normalizedForm;
		this.rank = rank;
		this.threatenedStatus = threatenedStatus;
		this.uploadTime = uploadTime;
		this.status = status;
		this.position = position;
		this.authorYear = authorYear;
		this.matchDatabaseName = matchDatabaseName;
		this.matchId = matchId;
		this.ibpSource = ibpSource;
		this.viaDatasource = viaDatasource;
		this.isFlagged = isFlagged;
		this.lowercaseMatchName = lowercaseMatchName;
		this.colNameStatus = colNameStatus;
		this.oldId = oldId;
		this.relationship = relationship;
		this.class_ = class_;
		this.flaggingReason = flaggingReason;
		this.noOfcolmatches = noOfcolmatches;
		this.isDeleted = isDeleted;
		this.dirtyListReason = dirtyListReason;
		this.activityDescription = activityDescription;
		this.defaultHierarchy = defaultHierarchy;
		this.nameSourceId = nameSourceId;
		this.traits = traits;
		this.traitsJson = traitsJson;
		this.commonNameses = commonNameses;
		this.namePermissionsForNodeId = namePermissionsForNodeId;
		this.taxonomyRegistriesForParentTaxonDefinitionId = taxonomyRegistriesForParentTaxonDefinitionId;
		this.recommendationsForTaxonConceptId = recommendationsForTaxonConceptId;
		this.acceptedSynonymsForSynonymId = acceptedSynonymsForSynonymId;
		this.namePermissionsForRootNodeId = namePermissionsForRootNodeId;
		this.speciesGroupMappings = speciesGroupMappings;
		this.speciesPermissions = speciesPermissions;
		this.taxonomyDefinitionYears = taxonomyDefinitionYears;
		this.docSciNames = docSciNames;
		this.taxonomyRegistriesForTaxonDefinitionId = taxonomyRegistriesForTaxonDefinitionId;
		this.acceptedSynonymsForAcceptedId = acceptedSynonymsForAcceptedId;
		this.synonymses = synonymses;
		this.traitTaxonomyDefinitions = traitTaxonomyDefinitions;
		this.facts = facts;
		this.recommendationsForAcceptedNameId = recommendationsForAcceptedNameId;
		this.taxonomyDefinitionAuthors = taxonomyDefinitionAuthors;
		this.taxonomyDefinitionSusers = taxonomyDefinitionSusers;
		this.specieses = specieses;
	}

	@Id

	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "species_id")
	public Species getSpecies() {
		return this.species;
	}

	public void setSpecies(Species species) {
		this.species = species;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "group_id")
	public SpeciesGroup getSpeciesGroup() {
		return this.speciesGroup;
	}

	public void setSpeciesGroup(SpeciesGroup speciesGroup) {
		this.speciesGroup = speciesGroup;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "uploader_id")
	public Suser getSuser() {
		return this.suser;
	}

	public void setSuser(Suser suser) {
		this.suser = suser;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "external_links_id")
	public ExternalLinks getExternalLinks() {
		return this.externalLinks;
	}

	public void setExternalLinks(ExternalLinks externalLinks) {
		this.externalLinks = externalLinks;
	}

	@Column(name = "binomial_form")
	public String getBinomialForm() {
		return this.binomialForm;
	}

	public void setBinomialForm(String binomialForm) {
		this.binomialForm = binomialForm;
	}

	@Column(name = "canonical_form", nullable = false)
	public String getCanonicalForm() {
		return this.canonicalForm;
	}

	public void setCanonicalForm(String canonicalForm) {
		this.canonicalForm = canonicalForm;
	}

	@Column(name = "italicised_form")
	public String getItalicisedForm() {
		return this.italicisedForm;
	}

	public void setItalicisedForm(String italicisedForm) {
		this.italicisedForm = italicisedForm;
	}

	@Column(name = "name", nullable = false)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "normalized_form")
	public String getNormalizedForm() {
		return this.normalizedForm;
	}

	public void setNormalizedForm(String normalizedForm) {
		this.normalizedForm = normalizedForm;
	}

	@Column(name = "rank", nullable = false)
	public int getRank() {
		return this.rank;
	}

	public void setRank(int rank) {
		this.rank = rank;
	}

	@Column(name = "threatened_status")
	public String getThreatenedStatus() {
		return this.threatenedStatus;
	}

	public void setThreatenedStatus(String threatenedStatus) {
		this.threatenedStatus = threatenedStatus;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "upload_time", length = 29)
	public Date getUploadTime() {
		return this.uploadTime;
	}

	public void setUploadTime(Date uploadTime) {
		this.uploadTime = uploadTime;
	}

	@Column(name = "status")
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@Column(name = "position")
	public String getPosition() {
		return this.position;
	}

	public void setPosition(String position) {
		this.position = position;
	}

	@Column(name = "author_year")
	public String getAuthorYear() {
		return this.authorYear;
	}

	public void setAuthorYear(String authorYear) {
		this.authorYear = authorYear;
	}

	@Column(name = "match_database_name")
	public String getMatchDatabaseName() {
		return this.matchDatabaseName;
	}

	public void setMatchDatabaseName(String matchDatabaseName) {
		this.matchDatabaseName = matchDatabaseName;
	}

	@Column(name = "match_id")
	public String getMatchId() {
		return this.matchId;
	}

	public void setMatchId(String matchId) {
		this.matchId = matchId;
	}

	@Column(name = "ibp_source")
	public String getIbpSource() {
		return this.ibpSource;
	}

	public void setIbpSource(String ibpSource) {
		this.ibpSource = ibpSource;
	}

	@Column(name = "via_datasource")
	public String getViaDatasource() {
		return this.viaDatasource;
	}

	public void setViaDatasource(String viaDatasource) {
		this.viaDatasource = viaDatasource;
	}

	@Column(name = "is_flagged")
	public Boolean getIsFlagged() {
		return this.isFlagged;
	}

	public void setIsFlagged(Boolean isFlagged) {
		this.isFlagged = isFlagged;
	}

	@Column(name = "lowercase_match_name")
	public String getLowercaseMatchName() {
		return this.lowercaseMatchName;
	}

	public void setLowercaseMatchName(String lowercaseMatchName) {
		this.lowercaseMatchName = lowercaseMatchName;
	}

	@Column(name = "col_name_status")
	public String getColNameStatus() {
		return this.colNameStatus;
	}

	public void setColNameStatus(String colNameStatus) {
		this.colNameStatus = colNameStatus;
	}

	@Column(name = "old_id")
	public String getOldId() {
		return this.oldId;
	}

	public void setOldId(String oldId) {
		this.oldId = oldId;
	}

	@Column(name = "relationship")
	public String getRelationship() {
		return this.relationship;
	}

	public void setRelationship(String relationship) {
		this.relationship = relationship;
	}

	@Column(name = "class", nullable = false)
	public String getClass_() {
		return this.class_;
	}

	public void setClass_(String class_) {
		this.class_ = class_;
	}

	@Column(name = "flagging_reason", length = 1500)
	public String getFlaggingReason() {
		return this.flaggingReason;
	}

	public void setFlaggingReason(String flaggingReason) {
		this.flaggingReason = flaggingReason;
	}

	@Column(name = "no_ofcolmatches")
	public Integer getNoOfcolmatches() {
		return this.noOfcolmatches;
	}

	public void setNoOfcolmatches(Integer noOfcolmatches) {
		this.noOfcolmatches = noOfcolmatches;
	}

	@Column(name = "is_deleted")
	public Boolean getIsDeleted() {
		return this.isDeleted;
	}

	public void setIsDeleted(Boolean isDeleted) {
		this.isDeleted = isDeleted;
	}

	@Column(name = "dirty_list_reason", length = 1000)
	public String getDirtyListReason() {
		return this.dirtyListReason;
	}

	public void setDirtyListReason(String dirtyListReason) {
		this.dirtyListReason = dirtyListReason;
	}

	@Column(name = "activity_description", length = 2000)
	public String getActivityDescription() {
		return this.activityDescription;
	}

	public void setActivityDescription(String activityDescription) {
		this.activityDescription = activityDescription;
	}

	@Column(name = "default_hierarchy")
	public String getDefaultHierarchy() {
		return this.defaultHierarchy;
	}

	public void setDefaultHierarchy(String defaultHierarchy) {
		this.defaultHierarchy = defaultHierarchy;
	}

	@Column(name = "name_source_id")
	public String getNameSourceId() {
		return this.nameSourceId;
	}

	public void setNameSourceId(String nameSourceId) {
		this.nameSourceId = nameSourceId;
	}

	@Column(name = "traits")
	public Serializable getTraits() {
		return this.traits;
	}

	public void setTraits(Serializable traits) {
		this.traits = traits;
	}

	@Column(name = "traits_json")
	public Serializable getTraitsJson() {
		return this.traitsJson;
	}

	public void setTraitsJson(Serializable traitsJson) {
		this.traitsJson = traitsJson;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinition")
	public Set getCommonNameses() {
		return this.commonNameses;
	}

	public void setCommonNameses(Set commonNameses) {
		this.commonNameses = commonNameses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinitionByNodeId")
	public Set getNamePermissionsForNodeId() {
		return this.namePermissionsForNodeId;
	}

	public void setNamePermissionsForNodeId(Set namePermissionsForNodeId) {
		this.namePermissionsForNodeId = namePermissionsForNodeId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinitionByParentTaxonDefinitionId")
	public Set getTaxonomyRegistriesForParentTaxonDefinitionId() {
		return this.taxonomyRegistriesForParentTaxonDefinitionId;
	}

	public void setTaxonomyRegistriesForParentTaxonDefinitionId(Set taxonomyRegistriesForParentTaxonDefinitionId) {
		this.taxonomyRegistriesForParentTaxonDefinitionId = taxonomyRegistriesForParentTaxonDefinitionId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinitionByTaxonConceptId")
	public Set getRecommendationsForTaxonConceptId() {
		return this.recommendationsForTaxonConceptId;
	}

	public void setRecommendationsForTaxonConceptId(Set recommendationsForTaxonConceptId) {
		this.recommendationsForTaxonConceptId = recommendationsForTaxonConceptId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinitionBySynonymId")
	public Set getAcceptedSynonymsForSynonymId() {
		return this.acceptedSynonymsForSynonymId;
	}

	public void setAcceptedSynonymsForSynonymId(Set acceptedSynonymsForSynonymId) {
		this.acceptedSynonymsForSynonymId = acceptedSynonymsForSynonymId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinitionByRootNodeId")
	public Set getNamePermissionsForRootNodeId() {
		return this.namePermissionsForRootNodeId;
	}

	public void setNamePermissionsForRootNodeId(Set namePermissionsForRootNodeId) {
		this.namePermissionsForRootNodeId = namePermissionsForRootNodeId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinition")
	public Set getSpeciesGroupMappings() {
		return this.speciesGroupMappings;
	}

	public void setSpeciesGroupMappings(Set speciesGroupMappings) {
		this.speciesGroupMappings = speciesGroupMappings;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinition")
	public Set getSpeciesPermissions() {
		return this.speciesPermissions;
	}

	public void setSpeciesPermissions(Set speciesPermissions) {
		this.speciesPermissions = speciesPermissions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinition")
	public Set getTaxonomyDefinitionYears() {
		return this.taxonomyDefinitionYears;
	}

	public void setTaxonomyDefinitionYears(Set taxonomyDefinitionYears) {
		this.taxonomyDefinitionYears = taxonomyDefinitionYears;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinition")
	public Set getDocSciNames() {
		return this.docSciNames;
	}

	public void setDocSciNames(Set docSciNames) {
		this.docSciNames = docSciNames;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinitionByTaxonDefinitionId")
	public Set getTaxonomyRegistriesForTaxonDefinitionId() {
		return this.taxonomyRegistriesForTaxonDefinitionId;
	}

	public void setTaxonomyRegistriesForTaxonDefinitionId(Set taxonomyRegistriesForTaxonDefinitionId) {
		this.taxonomyRegistriesForTaxonDefinitionId = taxonomyRegistriesForTaxonDefinitionId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinitionByAcceptedId")
	public Set getAcceptedSynonymsForAcceptedId() {
		return this.acceptedSynonymsForAcceptedId;
	}

	public void setAcceptedSynonymsForAcceptedId(Set acceptedSynonymsForAcceptedId) {
		this.acceptedSynonymsForAcceptedId = acceptedSynonymsForAcceptedId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinition")
	public Set getSynonymses() {
		return this.synonymses;
	}

	public void setSynonymses(Set synonymses) {
		this.synonymses = synonymses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinition")
	public Set getTraitTaxonomyDefinitions() {
		return this.traitTaxonomyDefinitions;
	}

	public void setTraitTaxonomyDefinitions(Set traitTaxonomyDefinitions) {
		this.traitTaxonomyDefinitions = traitTaxonomyDefinitions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinition")
	public Set getFacts() {
		return this.facts;
	}

	public void setFacts(Set facts) {
		this.facts = facts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinitionByAcceptedNameId")
	public Set getRecommendationsForAcceptedNameId() {
		return this.recommendationsForAcceptedNameId;
	}

	public void setRecommendationsForAcceptedNameId(Set recommendationsForAcceptedNameId) {
		this.recommendationsForAcceptedNameId = recommendationsForAcceptedNameId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinition")
	public Set getTaxonomyDefinitionAuthors() {
		return this.taxonomyDefinitionAuthors;
	}

	public void setTaxonomyDefinitionAuthors(Set taxonomyDefinitionAuthors) {
		this.taxonomyDefinitionAuthors = taxonomyDefinitionAuthors;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinition")
	public Set getTaxonomyDefinitionSusers() {
		return this.taxonomyDefinitionSusers;
	}

	public void setTaxonomyDefinitionSusers(Set taxonomyDefinitionSusers) {
		this.taxonomyDefinitionSusers = taxonomyDefinitionSusers;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taxonomyDefinition")
	public Set getSpecieses() {
		return this.specieses;
	}

	public void setSpecieses(Set specieses) {
		this.specieses = specieses;
	}

}
